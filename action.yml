name: Run Script Kaggle
author: Kevin Kibe
branding:
  icon: upload
  color: green
description: Run any Python/R on Kaggle as tests/code execution.

inputs:
  username:
    description: kaggle username
    required: true
  key:
    description: kaggle token
    required: true
  title:
    description: The title of the kernel
    required: true
  custom_script:
    description: Custom script content to run in the notebook
    required: true
    default: "print('Now what')"
  enable_gpu:
    description: Whether or not kernel should run on a GPU.
    required: false
    default: "false"
  enable_tpu:
    description: Whether or not kernel should run on a TPU.
    required: false
    default: "false"
  enable_internet:
    description: Whether or not kernel should be able to access the internet.
    required: false
    default: "true"
  dataset_sources:
    description: A list of data sources that kernel should use. Each dataset is specified as {username}/{dataset-slug}.
    required: false
    default: ""
  competition_sources:
    description: A list of competition data sources that kernel should use.
    required: false
    default: ""
  kernel_sources:
    description: A list of kernel data sources that kernel should use. Each dataset is specified as {username}/{kernel-slug}.
    required: false
    default: ""

outputs:
  automatic_releases_tag:
    description: The release tag this action just processed
    value: ""
  upload_url:
    description: The URL for uploading additional assets to the release
    value: ""

runs:
  using: composite
  steps:
    - name: Install kaggle CLI tools
      shell: bash
      run: |
        python -m pip install --upgrade kaggle --user

    - name: Setup kaggle.json
      shell: bash
      run: |
        log_message() {
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
        }
        
        log_message "Creating the Kaggle configuration directory at ~/.kaggle..."
        mkdir -p ~/.kaggle
        
        log_message "Writing credentials to kaggle.json..."
        
        if [ -z "${{ inputs.username }}" ]; then
            echo "::error::Username is required but was empty"
            exit 1
        fi
        
        if [ -z "${{ inputs.key }}" ]; then
            echo "::error::Kaggle key is required but was empty"
            exit 1
        fi
        
        echo "{\"username\":\"${{ inputs.username }}\",\"key\":\"${{ inputs.key }}\"}" > ~/.kaggle/kaggle.json
        
        log_message "Setting appropriate permissions for kaggle.json (read and write for user only)..."
        chmod 600 ~/.kaggle/kaggle.json
        
        log_message "Kaggle configuration setup complete."

    - name: Set up Notebook Kernel
      shell: bash
      run: |
        log_message() {
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
        }
        
        log_message "Setting up the notebook for Kaggle execution..."
        
        action_path=$(realpath "${{ github.action_path }}")
        OUTPUT_NOTEBOOK="$action_path/script.ipynb"
        log_message "Notebook will be saved as: $OUTPUT_NOTEBOOK"
        
        REPO_URL=$(git config --get remote.origin.url)        
        REPO_NAME=$(basename "$REPO_URL" .git)
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        log_message "Cloning repository URL: $REPO_URL on branch: $BRANCH_NAME"
        
        CUSTOM_SCRIPT="${{ inputs.custom_script }}"
        log_message "Adding custom script to notebook: $CUSTOM_SCRIPT"
        
        dependencies="!cd /kaggle/working/$REPO_NAME && pip install -r requirements.txt"
        
        cat <<EOM > "$OUTPUT_NOTEBOOK"
        {
          "cells": [
            {
              "cell_type": "code",
              "execution_count": null,
              "metadata": {},
              "outputs": [],
              "source": [
                "!git clone --branch $BRANCH_NAME $REPO_URL.git"
              ]
            },
            {
              "cell_type": "code",
              "execution_count": null,
              "metadata": {},
              "outputs": [],
              "source": [
                "$dependencies"
              ]
            },
            {
              "cell_type": "code",
              "execution_count": null,
              "metadata": {},
              "outputs": [],
              "source": [
                "$CUSTOM_SCRIPT"
              ]
            }
          ],
          "metadata": {
            "kernelspec": {
              "display_name": "Python 3",
              "language": "python",
              "name": "python3"
            },
            "language_info": {
              "name": "python",
              "version": "3.8"
            }
          },
          "nbformat": 4,
          "nbformat_minor": 2
        }
        EOM
        
        log_message "Notebook '$OUTPUT_NOTEBOOK' created successfully"


    - name: Setup test
      shell: bash
      run: |
        log_message() {
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
        }
        
        action_path=$(realpath "${{ github.action_path }}")
        OUTPUT_NOTEBOOK="$action_path/script.ipynb"
        
        log_message "Navigating to the action path: '$action_path'"
        cd "$action_path"
        
        log_message "Initializing Kaggle kernel metadata..."
        kaggle kernels init -p "$action_path"
        
        json_path="$action_path/kernel-metadata.json"
        log_message "Kernel metadata template created at: $json_path"
        
        metadata=$(jq -r '. | tojson' < "$json_path")
        
        title="${{ inputs.title }}"  
        formatted_title=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g')
        
        log_message "Updating metadata with specified inputs..."
        metadata=$(echo "$metadata" | jq --arg title "${{ inputs.title }}" \
                                 --arg code_file "$OUTPUT_NOTEBOOK" \
                                 --argjson enable_gpu "${{ inputs.enable_gpu }}" \
                                 --argjson enable_internet "${{ inputs.enable_internet }}" \
                                 --argjson enable_tpu "${{ inputs.enable_tpu }}" \
                                 '. |
                                   .id = (.id | split("/")[0]) + "/" + $title |
                                   .title = $title |
                                   .code_file = $code_file |
                                   .language = "python" |
                                   .kernel_type = "notebook" |
                                   .enable_gpu = $enable_gpu |
                                   .enable_internet = $enable_internet |
                                   .enable_tpu = $enable_tpu')
        
        echo "Saving updated metadata back to $json_path"
        echo "$metadata" | jq '.' > "$json_path"
        
        echo "Final kernel metadata content:"
        cat "$json_path"  
        
        log_message "Pushing Kaggle kernel with updated metadata..."
        kaggle kernels push -p "$action_path"
        
        log_message "Kaggle kernel setup and push completed successfully."
    

    - name: Check status
      shell: bash
      run: |
        
        username="${{ inputs.username }}"
        kernel_name="${username}/${{ inputs.title }}"
        action_path="${{ github.action_path }}"
        action_path=$(realpath "${{ github.action_path }}")
        echo "Checking status for Kaggle kernel: '$kernel_name'"

        log_message() {
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
        }
        while true; do
            log_message "Retrieving kernel status..."
            status=$(kaggle kernels status "$kernel_name" 2>&1)

            if [[ "$status" == *"error"* ]]; then
                log_message "::error::FAIL: Test(s) failed."
                exit 1
            elif [[ "$status" == *"cancel"* ]]; then
                log_message "::error::FAIL: Test(s) failed. The Kaggle kernel has been canceled."
                exit 1
            elif [[ "$status" == *"complete"* ]]; then
                log_message "SUCCESS: Kaggle Integration Tests completed successfully!"
                break
            else
                log_message "Kernel is still running. Rechecking in 3 seconds..."
                sleep 3
            fi
        done

        if [ $? -ne 0 ]; then
            log_message "::group::Full log"
            log_message "Fetching full kernel output log for '$kernel_name':"
            kaggle kernels output "$kernel_name" 2>&1
            log_message "::endgroup::"
            exit 1
        fi